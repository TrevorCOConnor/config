I have begun to notice that there are certain conventional taboos in object oriented and imperative programming that actually encouraged in Hasekll (and I assume other functional settings). The most recent example being in `GlobRegex.hs`. We have a function called `globToRegex'` (which as the name suggests is the guts of another function), and a function called `charClass`. These two separate function actually depend on each other in an internal capacity. 

`globToRegex'` scans through characters looking for certain regex characters, and when a group is denoted by "[ ... ]" it envokes the `charClass` function to handle the character class. From an intuitive stand point, we might want to break out the whole char class and pass that block to the `charClass` function from `globToRegex`, but from a lazy perspective, if we are parsing character bycharacter, then we'll eventually just 
